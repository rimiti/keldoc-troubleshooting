"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _agendas = _interopRequireDefault(require("./resources/agendas"));

var _appointments = _interopRequireDefault(require("./resources/appointments"));

var _availabilities = _interopRequireDefault(require("./resources/availabilities"));

var _available_slots = _interopRequireDefault(require("./resources/available_slots"));

var _motives = _interopRequireDefault(require("./resources/motives"));

var _patients = _interopRequireDefault(require("./resources/patients"));

var _specialties = _interopRequireDefault(require("./resources/specialties"));

var _config = _interopRequireDefault(require("./resources/config"));

var _webhooks = _interopRequireDefault(require("./resources/config/webhooks"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var SDK =
/*#__PURE__*/
function () {
  function SDK(configuration) {
    _classCallCheck(this, SDK);

    this.configuration = configuration;
  }
  /**
   * @description Returns Agendas singleton.
   * @return {Agendas}
   */


  _createClass(SDK, [{
    key: "agendas",
    get: function get() {
      if (!this.agendasClass) {
        this.agendasClass = new _agendas.default(this.configuration);
      }

      return this.agendasClass;
    }
    /**
     * @description Returns Appointments singleton.
     * @return {Appointments}
     */

  }, {
    key: "appointments",
    get: function get() {
      if (!this.appointmentsClass) {
        this.appointmentsClass = new _appointments.default(this.configuration);
      }

      return this.appointmentsClass;
    }
    /**
     * @description Returns Availabilities singleton.
     * @return {Availabilities}
     */

  }, {
    key: "availabilities",
    get: function get() {
      if (!this.availabilitiesClass) {
        this.availabilitiesClass = new _availabilities.default(this.configuration);
      }

      return this.availabilitiesClass;
    }
    /**
     * @description Returns AvailableSlots singleton.
     * @return {AvailableSlots}
     */

  }, {
    key: "availableSlots",
    get: function get() {
      if (!this.availableSlotsClass) {
        this.availableSlotsClass = new _available_slots.default(this.configuration);
      }

      return this.availableSlotsClass;
    }
    /**
     * @description Returns Motives singleton.
     * @return {Motives}
     */

  }, {
    key: "motives",
    get: function get() {
      if (!this.motivesClass) {
        this.motivesClass = new _motives.default(this.configuration);
      }

      return this.motivesClass;
    }
    /**
     * @description Returns Patients singleton.
     * @return {Patients}
     */

  }, {
    key: "patients",
    get: function get() {
      if (!this.patientsClass) {
        this.patientsClass = new _patients.default(this.configuration);
      }

      return this.patientsClass;
    }
    /**
     * @description Returns Specialties singleton.
     * @return {Specialties}
     */

  }, {
    key: "specialties",
    get: function get() {
      if (!this.specialtiesClass) {
        this.specialtiesClass = new _specialties.default(this.configuration);
      }

      return this.specialtiesClass;
    }
    /**
     * @description Returns Config singleton.
     * @return {Config}
     */

  }, {
    key: "config",
    get: function get() {
      if (!this.configClass) {
        this.configClass = new _config.default(this.configuration);
      }

      return this.configClass;
    }
    /**
     * @description Returns ConfigWebhooks singleton.
     * @return {ConfigWebhooks}
     */

  }, {
    key: "configWebhooks",
    get: function get() {
      if (!this.configWebhooksClass) {
        this.configWebhooksClass = new _webhooks.default(this.configuration);
      }

      return this.configWebhooksClass;
    }
  }]);

  return SDK;
}();

exports.default = SDK;