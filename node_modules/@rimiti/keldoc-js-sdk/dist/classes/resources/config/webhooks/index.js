"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _common = _interopRequireDefault(require("../../../common"));

var _validation = _interopRequireDefault(require("../../../validation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ConfigWebhooks =
/*#__PURE__*/
function (_Common) {
  _inherits(ConfigWebhooks, _Common);

  function ConfigWebhooks() {
    _classCallCheck(this, ConfigWebhooks);

    return _possibleConstructorReturn(this, _getPrototypeOf(ConfigWebhooks).apply(this, arguments));
  }

  _createClass(ConfigWebhooks, [{
    key: "get",

    /**
     * @description Get configuration.
     * @return {Promise.<any>}
     */
    value: function get() {
      var url = "".concat(this.configuration.routes.configWebhooks);
      return _get(_getPrototypeOf(ConfigWebhooks.prototype), "getRequest", this).call(this, url);
    }
    /**
     * @description Create webhook.
     * @param body
     * @return {Promise.<any>}
     */

  }, {
    key: "create",
    value: function create(body) {
      var _this = this;

      var url = "".concat(this.configuration.routes.configWebhooks);
      return _validation.default.validateCreateWebhook(body).then(function () {
        return _get(_getPrototypeOf(ConfigWebhooks.prototype), "postRequest", _this).call(_this, url, body);
      });
    }
    /**
     * @description Update webhook.
     * @param body
     * @return {Promise.<any>}
     */

  }, {
    key: "update",
    value: function update(body) {
      var url = "".concat(this.configuration.routes.configWebhooks);
      return _get(_getPrototypeOf(ConfigWebhooks.prototype), "putRequest", this).call(this, url, body);
    }
    /**
     * @description Remove webhook.
     * @return {Promise.<any>}
     */

  }, {
    key: "remove",
    value: function remove() {
      var url = "".concat(this.configuration.routes.configWebhooks);
      return _get(_getPrototypeOf(ConfigWebhooks.prototype), "deleteRequest", this).call(this, url);
    }
  }]);

  return ConfigWebhooks;
}(_common.default);

exports.default = ConfigWebhooks;