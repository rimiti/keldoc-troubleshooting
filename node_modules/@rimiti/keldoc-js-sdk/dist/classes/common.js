"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _axios = _interopRequireDefault(require("axios"));

var crypto = _interopRequireWildcard(require("crypto-js"));

var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

var _validation = _interopRequireDefault(require("./validation"));

var _exceptions = require("./exceptions");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Common =
/*#__PURE__*/
function () {
  function Common(configuration) {
    _classCallCheck(this, Common);

    this.validator = new _validation.default();
    this.headerContentType = 'application/json';
    this.headerDate = '';
    this.configuration = configuration;
  }
  /**
   * @description Generate a token for each requests.
   * @returns {void}
   */


  _createClass(Common, [{
    key: "generateHeader",
    value: function generateHeader() {
      _axios.default.defaults.headers.common = {
        Authorization: this.generateToken(this.configuration.credentials),
        Accept: 'application/vnd.keldoc-v1+json',
        'Content-Type': this.headerContentType,
        Date: this.headerDate
      };
    }
    /**
     * @description Generate token from credentials.
     * @param credentials
     * @returns {string}
     */

  }, {
    key: "generateToken",
    value: function generateToken(credentials) {
      this.headerDate = (0, _momentTimezone.default)().tz('Europe/Paris').format();
      var message = "".concat(this.headerDate, ",").concat(this.headerContentType);
      var signature = crypto.enc.Base64.stringify(crypto.HmacSHA256(message, credentials.secretAccessKeyId));
      return "Bearer ".concat(credentials.clientAccessKeyId, ":").concat(signature).replace(/[^A-Za-z0-9=:\s]/g, '');
    }
    /**
     * @description Runs GET request.
     * @param url
     * @param options
     * @return {Promise}
     */

  }, {
    key: "getRequest",
    value: function getRequest(url, options) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        _this.generateHeader();

        _axios.default.get(_this.configuration.host + url, options).then(function (response) {
          return resolve(response);
        }).catch(function (error) {
          return reject(Common.httpStatus(error.response));
        });
      });
    }
    /**
     * @description Runs POST request.
     * @param url
     * @param body
     * @return {Promise}
     */

  }, {
    key: "postRequest",
    value: function postRequest(url, body) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        _this2.generateHeader();

        _axios.default.post(_this2.configuration.host + url, body).then(function (response) {
          return resolve(response);
        }).catch(function (error) {
          console.log('[POST] -', _this2.configuration.host + url, ', headers used: ', JSON.stringify(_axios.default.defaults.headers.common));
          console.log('[RESPONSE] - HTTP code:', error.response.status, ', data:', JSON.stringify(error.response.data));
          return reject(Common.httpStatus(error.response));
        });
      });
    }
    /**
     * @description Runs PUT request.
     * @param url
     * @param body
     * @return {Promise}
     */

  }, {
    key: "putRequest",
    value: function putRequest(url, body) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        _this3.generateHeader();

        _axios.default.put(_this3.configuration.host + url, body).then(function (response) {
          return resolve(response);
        }).catch(function (error) {
          return reject(Common.httpStatus(error.response));
        });
      });
    }
    /**
     * @description Runs DELETE request.
     * @param url
     * @return {Promise}
     */

  }, {
    key: "deleteRequest",
    value: function deleteRequest(url) {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        _this4.generateHeader();

        _axios.default.delete(_this4.configuration.host + url).then(function (response) {
          return resolve(response);
        }).catch(function (error) {
          return reject(Common.httpStatus(error.response));
        });
      });
    }
    /**
     * @description Returns exception for non 2xx http codes.
     * @param response
     * @return {*}
     */

  }], [{
    key: "httpStatus",
    value: function httpStatus(response) {
      if (response.status === 400) return new _exceptions.BadRequest();
      if (response.status === 401) return new _exceptions.Unauthorized();
      if (response.status === 402) return new _exceptions.OverQuota();
      if (response.status === 404) return new _exceptions.NotFound();
      if (response.status === 406) return new _exceptions.NotAcceptable();
      if (response.status === 422) return new _exceptions.ValidationError();
      if (response.status === 500) return new _exceptions.InternalError();
      return new _exceptions.UnknownError();
    }
  }]);

  return Common;
}();

exports.default = Common;
